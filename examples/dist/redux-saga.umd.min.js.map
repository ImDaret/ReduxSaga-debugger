{"version":3,"file":"redux-saga.umd.min.js","sources":["../../symbols/src/index.js","../../../node_modules/@babel/runtime/helpers/esm/extends.js","../../is/src/index.js","../../core/src/internal/utils.js","../../core/src/internal/buffers.js","../../core/src/internal/scheduler.js","../../core/src/internal/matcher.js","../../core/src/internal/channel.js","../../../node_modules/symbol-observable/es/ponyfill.js","../../../node_modules/symbol-observable/es/index.js","../../../node_modules/redux/es/redux.js","../../core/src/internal/task-status.js","../../core/src/internal/effectTypes.js","../../core/src/internal/resolvePromise.js","../../core/src/internal/uid.js","../../core/src/internal/effectRunnerMap.js","../../core/src/internal/sagaError.js","../../core/src/internal/newTask.js","../../core/src/internal/forkQueue.js","../../deferred/src/index.js","../../core/src/internal/proc.js","../../core/src/internal/runSaga.js","../../delay-p/src/index.js","../../core/src/internal/io.js","../../core/src/internal/sagaHelpers/fsmIterator.js","../../core/src/internal/sagaHelpers/takeEvery.js","../../core/src/internal/sagaHelpers/takeLatest.js","../../core/src/internal/sagaHelpers/takeLeading.js","../../core/src/internal/sagaHelpers/throttle.js","../../core/src/internal/sagaHelpers/retry.js","../../core/src/internal/sagaHelpers/debounce.js","../../core/src/internal/io-helpers.js","../../core/src/internal/middleware.js","../../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["const createSymbol = name => `@@redux-saga/${name}`\n\nexport const CANCEL = createSymbol('CANCEL_PROMISE')\nexport const CHANNEL_END_TYPE = createSymbol('CHANNEL_END')\nexport const IO = createSymbol('IO')\nexport const MATCH = createSymbol('MATCH')\nexport const MULTICAST = createSymbol('MULTICAST')\nexport const SAGA_ACTION = createSymbol('SAGA_ACTION')\nexport const SELF_CANCELLATION = createSymbol('SELF_CANCELLATION')\nexport const TASK = createSymbol('TASK')\nexport const TASK_CANCEL = createSymbol('TASK_CANCEL')\nexport const TERMINATE = createSymbol('TERMINATE')\n\nexport const SAGA_LOCATION = createSymbol('LOCATION')\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import { TASK, MULTICAST, IO, SAGA_ACTION } from '@redux-saga/symbols'\n\nexport const undef = v => v === null || v === undefined\nexport const notUndef = v => v !== null && v !== undefined\nexport const func = f => typeof f === 'function'\nexport const number = n => typeof n === 'number'\nexport const string = s => typeof s === 'string'\nexport const array = Array.isArray\nexport const object = obj => obj && !array(obj) && typeof obj === 'object'\nexport const promise = p => p && func(p.then)\nexport const iterator = it => it && func(it.next) && func(it.throw)\nexport const iterable = it => (it && func(Symbol) ? func(it[Symbol.iterator]) : array(it))\nexport const task = t => t && t[TASK]\nexport const sagaAction = a => Boolean(a && a[SAGA_ACTION])\nexport const observable = ob => ob && func(ob.subscribe)\nexport const buffer = buf => buf && func(buf.isEmpty) && func(buf.take) && func(buf.put)\nexport const pattern = pat => pat && (string(pat) || symbol(pat) || func(pat) || (array(pat) && pat.every(pattern)))\nexport const channel = ch => ch && func(ch.take) && func(ch.close)\nexport const stringableFunc = f => func(f) && f.hasOwnProperty('toString')\nexport const symbol = sym =>\n  Boolean(sym) && typeof Symbol === 'function' && sym.constructor === Symbol && sym !== Symbol.prototype\nexport const multicast = ch => channel(ch) && ch[MULTICAST]\nexport const effect = eff => eff && eff[IO]\n","import _extends from '@babel/runtime/helpers/extends'\nimport * as is from '@redux-saga/is'\nimport { SAGA_LOCATION, SAGA_ACTION, TASK_CANCEL, TERMINATE } from '@redux-saga/symbols'\n\nexport const konst = v => () => v\nexport const kTrue = konst(true)\nexport const kFalse = konst(false)\n\nlet noop = () => {}\n\nif (process.env.NODE_ENV !== 'production' && typeof Proxy !== 'undefined') {\n  noop = new Proxy(noop, {\n    set: () => {\n      throw internalErr('There was an attempt to assign a property to internal `noop` function.')\n    },\n  })\n}\n\nexport { noop }\n\nexport const identity = v => v\n\nconst hasSymbol = typeof Symbol === 'function'\nexport const asyncIteratorSymbol = hasSymbol && Symbol.asyncIterator ? Symbol.asyncIterator : '@@asyncIterator'\n\nexport function check(value, predicate, error) {\n  if (!predicate(value)) {\n    throw new Error(error)\n  }\n}\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty\nexport function hasOwn(object, property) {\n  return is.notUndef(object) && hasOwnProperty.call(object, property)\n}\n\nexport const assignWithSymbols = (target, source) => {\n  _extends(target, source)\n\n  if (Object.getOwnPropertySymbols) {\n    Object.getOwnPropertySymbols(source).forEach(s => {\n      target[s] = source[s]\n    })\n  }\n}\n\nexport const flatMap = (mapper, arr) => [].concat(...arr.map(mapper))\n\nexport function remove(array, item) {\n  const index = array.indexOf(item)\n  if (index >= 0) {\n    array.splice(index, 1)\n  }\n}\n\nexport function once(fn) {\n  let called = false\n  return () => {\n    if (called) {\n      return\n    }\n    called = true\n    fn()\n  }\n}\n\nconst kThrow = err => {\n  throw err\n}\nconst kReturn = value => ({ value, done: true })\nexport function makeIterator(next, thro = kThrow, name = 'iterator') {\n  const iterator = { meta: { name }, next, throw: thro, return: kReturn, isSagaIterator: true }\n\n  if (typeof Symbol !== 'undefined') {\n    iterator[Symbol.iterator] = () => iterator\n  }\n  return iterator\n}\n\nexport function logError(error, { sagaStack }) {\n  /*eslint-disable no-console*/\n  console.error(error)\n  console.error(sagaStack)\n}\n\nexport function deprecate(fn, deprecationWarning) {\n  return (...args) => {\n    if (process.env.NODE_ENV !== 'production') console.warn(deprecationWarning)\n    return fn(...args)\n  }\n}\n\nexport const internalErr = err =>\n  new Error(\n    `\n  redux-saga: Error checking hooks detected an inconsistent state. This is likely a bug\n  in redux-saga code and not yours. Thanks for reporting this in the project's github repo.\n  Error: ${err}\n`,\n  )\n\nexport const createSetContextWarning = (ctx, props) =>\n  `${ctx ? ctx + '.' : ''}setContext(props): argument ${props} is not a plain object`\n\nconst FROZEN_ACTION_ERROR = `You can't put (a.k.a. dispatch from saga) frozen actions.\nWe have to define a special non-enumerable property on those actions for scheduling purposes.\nOtherwise you wouldn't be able to communicate properly between sagas & other subscribers (action ordering would become far less predictable).\nIf you are using redux and you care about this behaviour (frozen actions),\nthen you might want to switch to freezing actions in a middleware rather than in action creator.\nExample implementation:\n\nconst freezeActions = store => next => action => next(Object.freeze(action))\n`\n\n// creates empty, but not-holey array\nexport const createEmptyArray = n => Array.apply(null, new Array(n))\n\nexport const wrapSagaDispatch = dispatch => action => {\n  if (process.env.NODE_ENV !== 'production') {\n    check(action, ac => !Object.isFrozen(ac), FROZEN_ACTION_ERROR)\n  }\n  return dispatch(Object.defineProperty(action, SAGA_ACTION, { value: true }))\n}\n\nexport const shouldTerminate = res => res === TERMINATE\nexport const shouldCancel = res => res === TASK_CANCEL\nexport const shouldComplete = res => shouldTerminate(res) || shouldCancel(res)\n\nexport function createAllStyleChildCallbacks(shape, parentCallback) {\n  const keys = Object.keys(shape)\n  const totalCount = keys.length\n\n  if (process.env.NODE_ENV !== 'production') {\n    check(totalCount, c => c > 0, 'createAllStyleChildCallbacks: get an empty array or object')\n  }\n\n  let completedCount = 0\n  let completed\n  const results = is.array(shape) ? createEmptyArray(totalCount) : {}\n  const childCallbacks = {}\n\n  function checkEnd() {\n    if (completedCount === totalCount) {\n      completed = true\n      parentCallback(results)\n    }\n  }\n\n  keys.forEach(key => {\n    const chCbAtKey = (res, isErr) => {\n      if (completed) {\n        return\n      }\n      if (isErr || shouldComplete(res)) {\n        parentCallback.cancel()\n        parentCallback(res, isErr)\n      } else {\n        results[key] = res\n        completedCount++\n        checkEnd()\n      }\n    }\n    chCbAtKey.cancel = noop\n    childCallbacks[key] = chCbAtKey\n  })\n\n  parentCallback.cancel = () => {\n    if (!completed) {\n      completed = true\n      keys.forEach(key => childCallbacks[key].cancel())\n    }\n  }\n\n  return childCallbacks\n}\n\nexport function getMetaInfo(fn) {\n  return {\n    name: fn.name || 'anonymous',\n    location: getLocation(fn),\n  }\n}\n\nexport function getLocation(instrumented) {\n  return instrumented[SAGA_LOCATION]\n}\n","import { kTrue, noop } from './utils'\n\nconst BUFFER_OVERFLOW = \"Channel's Buffer overflow!\"\n\nconst ON_OVERFLOW_THROW = 1\nconst ON_OVERFLOW_DROP = 2\nconst ON_OVERFLOW_SLIDE = 3\nconst ON_OVERFLOW_EXPAND = 4\n\nconst zeroBuffer = { isEmpty: kTrue, put: noop, take: noop }\n\nfunction ringBuffer(limit = 10, overflowAction) {\n  let arr = new Array(limit)\n  let length = 0\n  let pushIndex = 0\n  let popIndex = 0\n\n  const push = it => {\n    arr[pushIndex] = it\n    pushIndex = (pushIndex + 1) % limit\n    length++\n  }\n\n  const take = () => {\n    if (length != 0) {\n      let it = arr[popIndex]\n      arr[popIndex] = null\n      length--\n      popIndex = (popIndex + 1) % limit\n      return it\n    }\n  }\n\n  const flush = () => {\n    let items = []\n    while (length) {\n      items.push(take())\n    }\n    return items\n  }\n\n  return {\n    isEmpty: () => length == 0,\n    put: it => {\n      if (length < limit) {\n        push(it)\n      } else {\n        let doubledLimit\n        switch (overflowAction) {\n          case ON_OVERFLOW_THROW:\n            throw new Error(BUFFER_OVERFLOW)\n          case ON_OVERFLOW_SLIDE:\n            arr[pushIndex] = it\n            pushIndex = (pushIndex + 1) % limit\n            popIndex = pushIndex\n            break\n          case ON_OVERFLOW_EXPAND:\n            doubledLimit = 2 * limit\n\n            arr = flush()\n\n            length = arr.length\n            pushIndex = arr.length\n            popIndex = 0\n\n            arr.length = doubledLimit\n            limit = doubledLimit\n\n            push(it)\n            break\n          default:\n          // DROP\n        }\n      }\n    },\n    take,\n    flush,\n  }\n}\n\nexport const none = () => zeroBuffer\nexport const fixed = limit => ringBuffer(limit, ON_OVERFLOW_THROW)\nexport const dropping = limit => ringBuffer(limit, ON_OVERFLOW_DROP)\nexport const sliding = limit => ringBuffer(limit, ON_OVERFLOW_SLIDE)\nexport const expanding = initialSize => ringBuffer(initialSize, ON_OVERFLOW_EXPAND)\n","const queue = []\n/**\n  Variable to hold a counting semaphore\n  - Incrementing adds a lock and puts the scheduler in a `suspended` state (if it's not\n    already suspended)\n  - Decrementing releases a lock. Zero locks puts the scheduler in a `released` state. This\n    triggers flushing the queued tasks.\n**/\nlet semaphore = 0\n\n/**\n  Executes a task 'atomically'. Tasks scheduled during this execution will be queued\n  and flushed after this task has finished (assuming the scheduler endup in a released\n  state).\n**/\nfunction exec(task) {\n  try {\n    suspend()\n    task()\n  } finally {\n    release()\n  }\n}\n\n/**\n  Executes or queues a task depending on the state of the scheduler (`suspended` or `released`)\n**/\nexport function asap(task) {\n  queue.push(task)\n\n  if (!semaphore) {\n    suspend()\n    flush()\n  }\n}\n\n/**\n * Puts the scheduler in a `suspended` state and executes a task immediately.\n */\nexport function immediately(task) {\n  try {\n    suspend()\n    return task()\n  } finally {\n    flush()\n  }\n}\n\n/**\n  Puts the scheduler in a `suspended` state. Scheduled tasks will be queued until the\n  scheduler is released.\n**/\nfunction suspend() {\n  semaphore++\n}\n\n/**\n  Puts the scheduler in a `released` state.\n**/\nfunction release() {\n  semaphore--\n}\n\n/**\n  Releases the current lock. Executes all queued tasks if the scheduler is in the released state.\n**/\nfunction flush() {\n  release()\n\n  let task\n  while (!semaphore && (task = queue.shift()) !== undefined) {\n    exec(task)\n  }\n}\n","import * as is from '@redux-saga/is'\nimport { kTrue } from './utils'\n\nexport const array = patterns => input => patterns.some(p => matcher(p)(input))\nexport const predicate = predicate => input => predicate(input)\nexport const string = pattern => input => input.type === String(pattern)\nexport const symbol = pattern => input => input.type === pattern\nexport const wildcard = () => kTrue\n\nexport default function matcher(pattern) {\n  // prettier-ignore\n  const matcherCreator = (\n      pattern === '*'            ? wildcard\n    : is.string(pattern)         ? string\n    : is.array(pattern)          ? array\n    : is.stringableFunc(pattern) ? string\n    : is.func(pattern)           ? predicate\n    : is.symbol(pattern)         ? symbol\n    : null\n  )\n\n  if (matcherCreator === null) {\n    throw new Error(`invalid pattern: ${pattern}`)\n  }\n\n  return matcherCreator(pattern)\n}\n","import * as is from '@redux-saga/is'\nimport { CHANNEL_END_TYPE, MATCH, MULTICAST, SAGA_ACTION } from '@redux-saga/symbols'\nimport { check, remove, once, internalErr } from './utils'\nimport * as buffers from './buffers'\nimport { asap } from './scheduler'\nimport * as matchers from './matcher'\n\nexport const END = { type: CHANNEL_END_TYPE }\nexport const isEnd = a => a && a.type === CHANNEL_END_TYPE\n\nconst CLOSED_CHANNEL_WITH_TAKERS = 'Cannot have a closed channel with pending takers'\nconst INVALID_BUFFER = 'invalid buffer passed to channel factory function'\nconst UNDEFINED_INPUT_ERROR = `Saga or channel was provided with an undefined action\nHints:\n  - check that your Action Creator returns a non-undefined value\n  - if the Saga was started using runSaga, check that your subscribe source provides the action to its listeners`\n\nexport function channel(buffer = buffers.expanding()) {\n  let closed = false\n  let takers = []\n\n  if (process.env.NODE_ENV !== 'production') {\n    check(buffer, is.buffer, INVALID_BUFFER)\n  }\n\n  function checkForbiddenStates() {\n    if (closed && takers.length) {\n      throw internalErr(CLOSED_CHANNEL_WITH_TAKERS)\n    }\n    if (takers.length && !buffer.isEmpty()) {\n      throw internalErr('Cannot have pending takers with non empty buffer')\n    }\n  }\n\n  function put(input) {\n    if (process.env.NODE_ENV !== 'production') {\n      checkForbiddenStates()\n      check(input, is.notUndef, UNDEFINED_INPUT_ERROR)\n    }\n\n    if (closed) {\n      return\n    }\n    if (takers.length === 0) {\n      return buffer.put(input)\n    }\n    const cb = takers.shift()\n    cb(input)\n  }\n\n  function take(cb) {\n    if (process.env.NODE_ENV !== 'production') {\n      checkForbiddenStates()\n      check(cb, is.func, \"channel.take's callback must be a function\")\n    }\n\n    if (closed && buffer.isEmpty()) {\n      cb(END)\n    } else if (!buffer.isEmpty()) {\n      cb(buffer.take())\n    } else {\n      takers.push(cb)\n      cb.cancel = () => {\n        remove(takers, cb)\n      }\n    }\n  }\n\n  function flush(cb) {\n    if (process.env.NODE_ENV !== 'production') {\n      checkForbiddenStates()\n      check(cb, is.func, \"channel.flush' callback must be a function\")\n    }\n\n    if (closed && buffer.isEmpty()) {\n      cb(END)\n      return\n    }\n    cb(buffer.flush())\n  }\n\n  function close() {\n    if (process.env.NODE_ENV !== 'production') {\n      checkForbiddenStates()\n    }\n\n    if (closed) {\n      return\n    }\n\n    closed = true\n\n    const arr = takers\n    takers = []\n\n    for (let i = 0, len = arr.length; i < len; i++) {\n      const taker = arr[i]\n      taker(END)\n    }\n  }\n\n  return {\n    take,\n    put,\n    flush,\n    close,\n  }\n}\n\nexport function eventChannel(subscribe, buffer = buffers.none()) {\n  let closed = false\n  let unsubscribe\n\n  const chan = channel(buffer)\n  const close = () => {\n    if (closed) {\n      return\n    }\n\n    closed = true\n\n    if (is.func(unsubscribe)) {\n      unsubscribe()\n    }\n    chan.close()\n  }\n\n  unsubscribe = subscribe(input => {\n    if (isEnd(input)) {\n      close()\n      return\n    }\n    chan.put(input)\n  })\n\n  if (process.env.NODE_ENV !== 'production') {\n    check(unsubscribe, is.func, 'in eventChannel: subscribe should return a function to unsubscribe')\n  }\n\n  unsubscribe = once(unsubscribe)\n\n  if (closed) {\n    unsubscribe()\n  }\n\n  return {\n    take: chan.take,\n    flush: chan.flush,\n    close,\n  }\n}\n\nexport function multicastChannel() {\n  let closed = false\n  let currentTakers = []\n  let nextTakers = currentTakers\n\n  function checkForbiddenStates() {\n    if (closed && nextTakers.length) {\n      throw internalErr(CLOSED_CHANNEL_WITH_TAKERS)\n    }\n  }\n\n  const ensureCanMutateNextTakers = () => {\n    if (nextTakers !== currentTakers) {\n      return\n    }\n    nextTakers = currentTakers.slice()\n  }\n\n  const close = () => {\n    if (process.env.NODE_ENV !== 'production') {\n      checkForbiddenStates()\n    }\n\n    closed = true\n    const takers = (currentTakers = nextTakers)\n    nextTakers = []\n    takers.forEach(taker => {\n      taker(END)\n    })\n  }\n\n  return {\n    [MULTICAST]: true,\n    put(input) {\n      if (process.env.NODE_ENV !== 'production') {\n        checkForbiddenStates()\n        check(input, is.notUndef, UNDEFINED_INPUT_ERROR)\n      }\n\n      if (closed) {\n        return\n      }\n\n      if (isEnd(input)) {\n        close()\n        return\n      }\n\n      const takers = (currentTakers = nextTakers)\n\n      for (let i = 0, len = takers.length; i < len; i++) {\n        const taker = takers[i]\n\n        if (taker[MATCH](input)) {\n          taker.cancel()\n          taker(input)\n        }\n      }\n    },\n    take(cb, matcher = matchers.wildcard) {\n      if (process.env.NODE_ENV !== 'production') {\n        checkForbiddenStates()\n      }\n      if (closed) {\n        cb(END)\n        return\n      }\n      cb[MATCH] = matcher\n      ensureCanMutateNextTakers()\n      nextTakers.push(cb)\n\n      cb.cancel = once(() => {\n        ensureCanMutateNextTakers()\n        remove(nextTakers, cb)\n      })\n    },\n    close,\n  }\n}\n\nexport function stdChannel() {\n  const chan = multicastChannel()\n  const { put } = chan\n  chan.put = input => {\n    if (input[SAGA_ACTION]) {\n      put(input)\n      return\n    }\n    asap(() => {\n      put(input)\n    })\n  }\n  return chan\n}\n","export default function symbolObservablePonyfill(root) {\n\tvar result;\n\tvar Symbol = root.Symbol;\n\n\tif (typeof Symbol === 'function') {\n\t\tif (Symbol.observable) {\n\t\t\tresult = Symbol.observable;\n\t\t} else {\n\t\t\tresult = Symbol('observable');\n\t\t\tSymbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n","/* global window */\nimport ponyfill from './ponyfill.js';\n\nvar root;\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (typeof module !== 'undefined') {\n  root = module;\n} else {\n  root = Function('return this')();\n}\n\nvar result = ponyfill(root);\nexport default result;\n","import $$observable from 'symbol-observable';\n\n/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\nvar randomString = function randomString() {\n  return Math.random().toString(36).substring(7).split('').join('.');\n};\n\nvar ActionTypes = {\n  INIT: \"@@redux/INIT\" + randomString(),\n  REPLACE: \"@@redux/REPLACE\" + randomString(),\n  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {\n    return \"@@redux/PROBE_UNKNOWN_ACTION\" + randomString();\n  }\n};\n\n/**\n * @param {any} obj The object to inspect.\n * @returns {boolean} True if the argument appears to be a plain object.\n */\nfunction isPlainObject(obj) {\n  if (typeof obj !== 'object' || obj === null) return false;\n  var proto = obj;\n\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return Object.getPrototypeOf(obj) === proto;\n}\n\n/**\n * Creates a Redux store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\n\nfunction createStore(reducer, preloadedState, enhancer) {\n  var _ref2;\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {\n    throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function.');\n  }\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState;\n    preloadedState = undefined;\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.');\n    }\n\n    return enhancer(createStore)(reducer, preloadedState);\n  }\n\n  if (typeof reducer !== 'function') {\n    throw new Error('Expected the reducer to be a function.');\n  }\n\n  var currentReducer = reducer;\n  var currentState = preloadedState;\n  var currentListeners = [];\n  var nextListeners = currentListeners;\n  var isDispatching = false;\n  /**\n   * This makes a shallow copy of currentListeners so we can use\n   * nextListeners as a temporary list while dispatching.\n   *\n   * This prevents any bugs around consumers calling\n   * subscribe/unsubscribe in the middle of a dispatch.\n   */\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice();\n    }\n  }\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n\n\n  function getState() {\n    if (isDispatching) {\n      throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');\n    }\n\n    return currentState;\n  }\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n\n\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('Expected the listener to be a function.');\n    }\n\n    if (isDispatching) {\n      throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');\n    }\n\n    var isSubscribed = true;\n    ensureCanMutateNextListeners();\n    nextListeners.push(listener);\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n\n      if (isDispatching) {\n        throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');\n      }\n\n      isSubscribed = false;\n      ensureCanMutateNextListeners();\n      var index = nextListeners.indexOf(listener);\n      nextListeners.splice(index, 1);\n    };\n  }\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n\n\n  function dispatch(action) {\n    if (!isPlainObject(action)) {\n      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');\n    }\n\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.');\n    }\n\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n\n    var listeners = currentListeners = nextListeners;\n\n    for (var i = 0; i < listeners.length; i++) {\n      var listener = listeners[i];\n      listener();\n    }\n\n    return action;\n  }\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n\n\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error('Expected the nextReducer to be a function.');\n    }\n\n    currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.\n    // Any reducers that existed in both the new and old rootReducer\n    // will receive the previous state. This effectively populates\n    // the new state tree with any relevant data from the old one.\n\n    dispatch({\n      type: ActionTypes.REPLACE\n    });\n  }\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns {observable} A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n\n\n  function observable() {\n    var _ref;\n\n    var outerSubscribe = subscribe;\n    return _ref = {\n      /**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe: function subscribe(observer) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new TypeError('Expected the observer to be an object.');\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState());\n          }\n        }\n\n        observeState();\n        var unsubscribe = outerSubscribe(observeState);\n        return {\n          unsubscribe: unsubscribe\n        };\n      }\n    }, _ref[$$observable] = function () {\n      return this;\n    }, _ref;\n  } // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n\n\n  dispatch({\n    type: ActionTypes.INIT\n  });\n  return _ref2 = {\n    dispatch: dispatch,\n    subscribe: subscribe,\n    getState: getState,\n    replaceReducer: replaceReducer\n  }, _ref2[$$observable] = observable, _ref2;\n}\n\n/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\nfunction warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message);\n  }\n  /* eslint-enable no-console */\n\n\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n  } catch (e) {} // eslint-disable-line no-empty\n\n}\n\nfunction getUndefinedStateErrorMessage(key, action) {\n  var actionType = action && action.type;\n  var actionDescription = actionType && \"action \\\"\" + String(actionType) + \"\\\"\" || 'an action';\n  return \"Given \" + actionDescription + \", reducer \\\"\" + key + \"\\\" returned undefined. \" + \"To ignore an action, you must explicitly return the previous state. \" + \"If you want this reducer to hold no value, you can return null instead of undefined.\";\n}\n\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n  var reducerKeys = Object.keys(reducers);\n  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\n\n  if (reducerKeys.length === 0) {\n    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\n  }\n\n  if (!isPlainObject(inputState)) {\n    return \"The \" + argumentName + \" has unexpected type of \\\"\" + {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] + \"\\\". Expected argument to be an object with the following \" + (\"keys: \\\"\" + reducerKeys.join('\", \"') + \"\\\"\");\n  }\n\n  var unexpectedKeys = Object.keys(inputState).filter(function (key) {\n    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];\n  });\n  unexpectedKeys.forEach(function (key) {\n    unexpectedKeyCache[key] = true;\n  });\n  if (action && action.type === ActionTypes.REPLACE) return;\n\n  if (unexpectedKeys.length > 0) {\n    return \"Unexpected \" + (unexpectedKeys.length > 1 ? 'keys' : 'key') + \" \" + (\"\\\"\" + unexpectedKeys.join('\", \"') + \"\\\" found in \" + argumentName + \". \") + \"Expected to find one of the known reducer keys instead: \" + (\"\\\"\" + reducerKeys.join('\", \"') + \"\\\". Unexpected keys will be ignored.\");\n  }\n}\n\nfunction assertReducerShape(reducers) {\n  Object.keys(reducers).forEach(function (key) {\n    var reducer = reducers[key];\n    var initialState = reducer(undefined, {\n      type: ActionTypes.INIT\n    });\n\n    if (typeof initialState === 'undefined') {\n      throw new Error(\"Reducer \\\"\" + key + \"\\\" returned undefined during initialization. \" + \"If the state passed to the reducer is undefined, you must \" + \"explicitly return the initial state. The initial state may \" + \"not be undefined. If you don't want to set a value for this reducer, \" + \"you can use null instead of undefined.\");\n    }\n\n    if (typeof reducer(undefined, {\n      type: ActionTypes.PROBE_UNKNOWN_ACTION()\n    }) === 'undefined') {\n      throw new Error(\"Reducer \\\"\" + key + \"\\\" returned undefined when probed with a random type. \" + (\"Don't try to handle \" + ActionTypes.INIT + \" or other actions in \\\"redux/*\\\" \") + \"namespace. They are considered private. Instead, you must return the \" + \"current state for any unknown actions, unless it is undefined, \" + \"in which case you must return the initial state, regardless of the \" + \"action type. The initial state may not be undefined, but can be null.\");\n    }\n  });\n}\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @param {Object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one. One handy way to obtain\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n * undefined for any action. Instead, they should return their initial state\n * if the state passed to them was undefined, and the current state for any\n * unrecognized action.\n *\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n */\n\n\nfunction combineReducers(reducers) {\n  var reducerKeys = Object.keys(reducers);\n  var finalReducers = {};\n\n  for (var i = 0; i < reducerKeys.length; i++) {\n    var key = reducerKeys[i];\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning(\"No reducer provided for key \\\"\" + key + \"\\\"\");\n      }\n    }\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n\n  var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same\n  // keys multiple times.\n\n  var unexpectedKeyCache;\n\n  if (process.env.NODE_ENV !== 'production') {\n    unexpectedKeyCache = {};\n  }\n\n  var shapeAssertionError;\n\n  try {\n    assertReducerShape(finalReducers);\n  } catch (e) {\n    shapeAssertionError = e;\n  }\n\n  return function combination(state, action) {\n    if (state === void 0) {\n      state = {};\n    }\n\n    if (shapeAssertionError) {\n      throw shapeAssertionError;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);\n\n      if (warningMessage) {\n        warning(warningMessage);\n      }\n    }\n\n    var hasChanged = false;\n    var nextState = {};\n\n    for (var _i = 0; _i < finalReducerKeys.length; _i++) {\n      var _key = finalReducerKeys[_i];\n      var reducer = finalReducers[_key];\n      var previousStateForKey = state[_key];\n      var nextStateForKey = reducer(previousStateForKey, action);\n\n      if (typeof nextStateForKey === 'undefined') {\n        var errorMessage = getUndefinedStateErrorMessage(_key, action);\n        throw new Error(errorMessage);\n      }\n\n      nextState[_key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n\n    return hasChanged ? nextState : state;\n  };\n}\n\nfunction bindActionCreator(actionCreator, dispatch) {\n  return function () {\n    return dispatch(actionCreator.apply(this, arguments));\n  };\n}\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass an action creator as the first argument,\n * and get a dispatch wrapped function in return.\n *\n * @param {Function|Object} actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\n * syntax. You may also pass a single function.\n *\n * @param {Function} dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns {Function|Object} The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\n\n\nfunction bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch);\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error(\"bindActionCreators expected an object or a function, instead received \" + (actionCreators === null ? 'null' : typeof actionCreators) + \". \" + \"Did you write \\\"import ActionCreators from\\\" instead of \\\"import * as ActionCreators from\\\"?\");\n  }\n\n  var boundActionCreators = {};\n\n  for (var key in actionCreators) {\n    var actionCreator = actionCreators[key];\n\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n    }\n  }\n\n  return boundActionCreators;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    keys.push.apply(keys, Object.getOwnPropertySymbols(object));\n  }\n\n  if (enumerableOnly) keys = keys.filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n  });\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\nfunction compose() {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n\n  return funcs.reduce(function (a, b) {\n    return function () {\n      return a(b.apply(void 0, arguments));\n    };\n  });\n}\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param {...Function} middlewares The middleware chain to be applied.\n * @returns {Function} A store enhancer applying the middleware.\n */\n\nfunction applyMiddleware() {\n  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {\n    middlewares[_key] = arguments[_key];\n  }\n\n  return function (createStore) {\n    return function () {\n      var store = createStore.apply(void 0, arguments);\n\n      var _dispatch = function dispatch() {\n        throw new Error('Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');\n      };\n\n      var middlewareAPI = {\n        getState: store.getState,\n        dispatch: function dispatch() {\n          return _dispatch.apply(void 0, arguments);\n        }\n      };\n      var chain = middlewares.map(function (middleware) {\n        return middleware(middlewareAPI);\n      });\n      _dispatch = compose.apply(void 0, chain)(store.dispatch);\n      return _objectSpread2({}, store, {\n        dispatch: _dispatch\n      });\n    };\n  };\n}\n\n/*\n * This is a dummy function to check if the function name has been altered by minification.\n * If the function has been minified and NODE_ENV !== 'production', warn the user.\n */\n\nfunction isCrushed() {}\n\nif (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {\n  warning('You are currently using minified code outside of NODE_ENV === \"production\". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');\n}\n\nexport { ActionTypes as __DO_NOT_USE__ActionTypes, applyMiddleware, bindActionCreators, combineReducers, compose, createStore };\n","export const RUNNING = 0\nexport const CANCELLED = 1\nexport const ABORTED = 2\nexport const DONE = 3\n","export const TAKE = 'TAKE'\nexport const PUT = 'PUT'\nexport const ALL = 'ALL'\nexport const RACE = 'RACE'\nexport const CALL = 'CALL'\nexport const CPS = 'CPS'\nexport const FORK = 'FORK'\nexport const JOIN = 'JOIN'\nexport const CANCEL = 'CANCEL'\nexport const SELECT = 'SELECT'\nexport const ACTION_CHANNEL = 'ACTION_CHANNEL'\nexport const CANCELLED = 'CANCELLED'\nexport const FLUSH = 'FLUSH'\nexport const GET_CONTEXT = 'GET_CONTEXT'\nexport const SET_CONTEXT = 'SET_CONTEXT'\n","import * as is from '@redux-saga/is'\nimport { CANCEL } from '@redux-saga/symbols'\n\nexport default function resolvePromise(promise, cb) {\n  const cancelPromise = promise[CANCEL]\n\n  if (is.func(cancelPromise)) {\n    cb.cancel = cancelPromise\n  }\n\n  promise.then(cb, error => {\n    cb(error, true)\n  })\n}\n","export let current = 0\n\nexport default () => ++current\n","import { SELF_CANCELLATION, TERMINATE } from '@redux-saga/symbols'\nimport * as is from '@redux-saga/is'\nimport * as effectTypes from './effectTypes'\nimport { channel, isEnd } from './channel'\n// usage of proc here makes internal circular dependency\n// this works fine, but it is a little bit unfortunate\nimport proc from './proc'\nimport resolvePromise from './resolvePromise'\nimport matcher from './matcher'\nimport { asap, immediately } from './scheduler'\nimport { current as currentEffectId } from './uid'\nimport {\n  assignWithSymbols,\n  createAllStyleChildCallbacks,\n  createEmptyArray,\n  makeIterator,\n  noop,\n  remove,\n  shouldComplete,\n  getMetaInfo,\n} from './utils'\n\nfunction getIteratorMetaInfo(iterator, fn) {\n  if (iterator.isSagaIterator) {\n    return { name: iterator.meta.name }\n  }\n  return getMetaInfo(fn)\n}\n\nfunction createTaskIterator({ context, fn, args }) {\n  // catch synchronous failures; see #152 and #441\n  try {\n    const result = fn.apply(context, args)\n\n    // i.e. a generator function returns an iterator\n    if (is.iterator(result)) {\n      return result\n    }\n\n    let resolved = false\n\n    const next = arg => {\n      if (!resolved) {\n        resolved = true\n        // Only promises returned from fork will be interpreted. See #1573\n        return { value: result, done: !is.promise(result) }\n      } else {\n        return { value: arg, done: true }\n      }\n    }\n\n    return makeIterator(next)\n  } catch (err) {\n    // do not bubble up synchronous failures for detached forks\n    // instead create a failed task. See #152 and #441\n    return makeIterator(() => {\n      throw err\n    })\n  }\n}\n\nfunction runPutEffect(env, { channel, action, resolve }, cb) {\n  /**\n   Schedule the put in case another saga is holding a lock.\n   The put will be executed atomically. ie nested puts will execute after\n   this put has terminated.\n   **/\n  asap(() => {\n    let result\n    try {\n      result = (channel ? channel.put : env.dispatch)(action)\n    } catch (error) {\n      cb(error, true)\n      return\n    }\n\n    if (resolve && is.promise(result)) {\n      resolvePromise(result, cb)\n    } else {\n      cb(result)\n    }\n  })\n  // Put effects are non cancellables\n}\n\nfunction runTakeEffect(env, { channel = env.channel, pattern, maybe }, cb) {\n  const takeCb = input => {\n    if (input instanceof Error) {\n      cb(input, true)\n      return\n    }\n    if (isEnd(input) && !maybe) {\n      cb(TERMINATE)\n      return\n    }\n    cb(input)\n  }\n  try {\n    channel.take(takeCb, is.notUndef(pattern) ? matcher(pattern) : null)\n  } catch (err) {\n    cb(err, true)\n    return\n  }\n  cb.cancel = takeCb.cancel\n}\n\nfunction runCallEffect(env, { context, fn, args }, cb, { task }) {\n  // catch synchronous failures; see #152\n  try {\n    const result = fn.apply(context, args)\n\n    if (is.promise(result)) {\n      resolvePromise(result, cb)\n      return\n    }\n\n    if (is.iterator(result)) {\n      // resolve iterator\n      proc(env, result, task.context, currentEffectId, getMetaInfo(fn), /* isRoot */ false, cb)\n      return\n    }\n\n    cb(result)\n  } catch (error) {\n    cb(error, true)\n  }\n}\n\nfunction runCPSEffect(env, { context, fn, args }, cb) {\n  // CPS (ie node style functions) can define their own cancellation logic\n  // by setting cancel field on the cb\n\n  // catch synchronous failures; see #152\n  try {\n    const cpsCb = (err, res) => {\n      if (is.undef(err)) {\n        cb(res)\n      } else {\n        cb(err, true)\n      }\n    }\n\n    fn.apply(context, args.concat(cpsCb))\n\n    if (cpsCb.cancel) {\n      cb.cancel = cpsCb.cancel\n    }\n  } catch (error) {\n    cb(error, true)\n  }\n}\n\nfunction runForkEffect(env, { context, fn, args, detached }, cb, { task: parent }) {\n  const taskIterator = createTaskIterator({ context, fn, args })\n  const meta = getIteratorMetaInfo(taskIterator, fn)\n\n  immediately(() => {\n    const child = proc(env, taskIterator, parent.context, currentEffectId, meta, detached, undefined)\n\n    if (detached) {\n      cb(child)\n    } else {\n      if (child.isRunning()) {\n        parent.queue.addTask(child)\n        cb(child)\n      } else if (child.isAborted()) {\n        parent.queue.abort(child.error())\n      } else {\n        cb(child)\n      }\n    }\n  })\n  // Fork effects are non cancellables\n}\n\nfunction runJoinEffect(env, taskOrTasks, cb, { task }) {\n  const joinSingleTask = (taskToJoin, cb) => {\n    if (taskToJoin.isRunning()) {\n      const joiner = { task, cb }\n      cb.cancel = () => {\n        if (taskToJoin.isRunning()) remove(taskToJoin.joiners, joiner)\n      }\n      taskToJoin.joiners.push(joiner)\n    } else {\n      if (taskToJoin.isAborted()) {\n        cb(taskToJoin.error(), true)\n      } else {\n        cb(taskToJoin.result())\n      }\n    }\n  }\n\n  if (is.array(taskOrTasks)) {\n    if (taskOrTasks.length === 0) {\n      cb([])\n      return\n    }\n\n    const childCallbacks = createAllStyleChildCallbacks(taskOrTasks, cb)\n    taskOrTasks.forEach((t, i) => {\n      joinSingleTask(t, childCallbacks[i])\n    })\n  } else {\n    joinSingleTask(taskOrTasks, cb)\n  }\n}\n\nfunction cancelSingleTask(taskToCancel) {\n  if (taskToCancel.isRunning()) {\n    taskToCancel.cancel()\n  }\n}\n\nfunction runCancelEffect(env, taskOrTasks, cb, { task }) {\n  if (taskOrTasks === SELF_CANCELLATION) {\n    cancelSingleTask(task)\n  } else if (is.array(taskOrTasks)) {\n    taskOrTasks.forEach(cancelSingleTask)\n  } else {\n    cancelSingleTask(taskOrTasks)\n  }\n  cb()\n  // cancel effects are non cancellables\n}\n\nfunction runAllEffect(env, effects, cb, { digestEffect }) {\n  const effectId = currentEffectId\n  const keys = Object.keys(effects)\n  if (keys.length === 0) {\n    cb(is.array(effects) ? [] : {})\n    return\n  }\n\n  const childCallbacks = createAllStyleChildCallbacks(effects, cb)\n  keys.forEach(key => {\n    digestEffect(effects[key], effectId, childCallbacks[key], key)\n  })\n}\n\nfunction runRaceEffect(env, effects, cb, { digestEffect }) {\n  const effectId = currentEffectId\n  const keys = Object.keys(effects)\n  const response = is.array(effects) ? createEmptyArray(keys.length) : {}\n  const childCbs = {}\n  let completed = false\n\n  keys.forEach(key => {\n    const chCbAtKey = (res, isErr) => {\n      if (completed) {\n        return\n      }\n      if (isErr || shouldComplete(res)) {\n        // Race Auto cancellation\n        cb.cancel()\n        cb(res, isErr)\n      } else {\n        cb.cancel()\n        completed = true\n        response[key] = res\n        cb(response)\n      }\n    }\n    chCbAtKey.cancel = noop\n    childCbs[key] = chCbAtKey\n  })\n\n  cb.cancel = () => {\n    // prevents unnecessary cancellation\n    if (!completed) {\n      completed = true\n      keys.forEach(key => childCbs[key].cancel())\n    }\n  }\n  keys.forEach(key => {\n    if (completed) {\n      return\n    }\n    digestEffect(effects[key], effectId, childCbs[key], key)\n  })\n}\n\nfunction runSelectEffect(env, { selector, args }, cb) {\n  try {\n    const state = selector(env.getState(), ...args)\n    cb(state)\n  } catch (error) {\n    cb(error, true)\n  }\n}\n\nfunction runChannelEffect(env, { pattern, buffer }, cb) {\n  const chan = channel(buffer)\n  const match = matcher(pattern)\n\n  const taker = action => {\n    if (!isEnd(action)) {\n      env.channel.take(taker, match)\n    }\n    chan.put(action)\n  }\n\n  const { close } = chan\n\n  chan.close = () => {\n    taker.cancel()\n    close()\n  }\n\n  env.channel.take(taker, match)\n  cb(chan)\n}\n\nfunction runCancelledEffect(env, data, cb, { task }) {\n  cb(task.isCancelled())\n}\n\nfunction runFlushEffect(env, channel, cb) {\n  channel.flush(cb)\n}\n\nfunction runGetContextEffect(env, prop, cb, { task }) {\n  cb(task.context[prop])\n}\n\nfunction runSetContextEffect(env, props, cb, { task }) {\n  assignWithSymbols(task.context, props)\n  cb()\n}\n\nconst effectRunnerMap = {\n  [effectTypes.TAKE]: runTakeEffect,\n  [effectTypes.PUT]: runPutEffect,\n  [effectTypes.ALL]: runAllEffect,\n  [effectTypes.RACE]: runRaceEffect,\n  [effectTypes.CALL]: runCallEffect,\n  [effectTypes.CPS]: runCPSEffect,\n  [effectTypes.FORK]: runForkEffect,\n  [effectTypes.JOIN]: runJoinEffect,\n  [effectTypes.CANCEL]: runCancelEffect,\n  [effectTypes.SELECT]: runSelectEffect,\n  [effectTypes.ACTION_CHANNEL]: runChannelEffect,\n  [effectTypes.CANCELLED]: runCancelledEffect,\n  [effectTypes.FLUSH]: runFlushEffect,\n  [effectTypes.GET_CONTEXT]: runGetContextEffect,\n  [effectTypes.SET_CONTEXT]: runSetContextEffect,\n}\n\nexport default effectRunnerMap\n","// there can be only a single saga error created at any given moment\n// so this module acts as a singleton for bookkeeping it\nimport { getLocation, flatMap } from './utils'\n\nfunction formatLocation(fileName, lineNumber) {\n  return `${fileName}?${lineNumber}`\n}\n\nfunction effectLocationAsString(effect) {\n  const location = getLocation(effect)\n  if (location) {\n    const { code, fileName, lineNumber } = location\n    const source = `${code}  ${formatLocation(fileName, lineNumber)}`\n    return source\n  }\n  return ''\n}\n\nfunction sagaLocationAsString(sagaMeta) {\n  const { name, location } = sagaMeta\n  if (location) {\n    return `${name}  ${formatLocation(location.fileName, location.lineNumber)}`\n  }\n  return name\n}\n\nfunction cancelledTasksAsString(sagaStack) {\n  const cancelledTasks = flatMap(i => i.cancelledTasks, sagaStack)\n  if (!cancelledTasks.length) {\n    return ''\n  }\n  return ['Tasks cancelled due to error:', ...cancelledTasks].join('\\n')\n}\n\nlet crashedEffect = null\nconst sagaStack = []\n\nexport const addSagaFrame = frame => {\n  frame.crashedEffect = crashedEffect\n  sagaStack.push(frame)\n}\n\nexport const clear = () => {\n  crashedEffect = null\n  sagaStack.length = 0\n}\n\n// this sets crashed effect for the soon-to-be-reported saga frame\n// this slightly streatches the singleton nature of this module into wrong direction\n// as it's even less obvious what's the data flow here, but it is what it is for now\nexport const setCrashedEffect = effect => {\n  crashedEffect = effect\n}\n\n/**\n  @returns {string}\n\n  @example\n  The above error occurred in task errorInPutSaga {pathToFile}\n  when executing effect put({type: 'REDUCER_ACTION_ERROR_IN_PUT'}) {pathToFile}\n      created by fetchSaga {pathToFile}\n      created by rootSaga {pathToFile}\n*/\nexport const toString = () => {\n  const [firstSaga, ...otherSagas] = sagaStack\n  const crashedEffectLocation = firstSaga.crashedEffect ? effectLocationAsString(firstSaga.crashedEffect) : null\n  const errorMessage = `The above error occurred in task ${sagaLocationAsString(firstSaga.meta)}${\n    crashedEffectLocation ? ` \\n when executing effect ${crashedEffectLocation}` : ''\n  }`\n\n  return [\n    errorMessage,\n    ...otherSagas.map(s => `    created by ${sagaLocationAsString(s.meta)}`),\n    cancelledTasksAsString(sagaStack),\n  ].join('\\n')\n}\n","import deferred from '@redux-saga/deferred'\nimport * as is from '@redux-saga/is'\nimport { TASK, TASK_CANCEL } from '@redux-saga/symbols'\nimport { RUNNING, CANCELLED, ABORTED, DONE } from './task-status'\nimport { assignWithSymbols, check, createSetContextWarning, noop } from './utils'\nimport forkQueue from './forkQueue'\nimport * as sagaError from './sagaError'\n\nexport default function newTask(env, mainTask, parentContext, parentEffectId, meta, isRoot, cont = noop) {\n  let status = RUNNING\n  let taskResult\n  let taskError\n  let deferredEnd = null\n\n  const cancelledDueToErrorTasks = []\n\n  const context = Object.create(parentContext)\n  const queue = forkQueue(\n    mainTask,\n    function onAbort() {\n      cancelledDueToErrorTasks.push(...queue.getTasks().map(t => t.meta.name))\n    },\n    end,\n  )\n\n  /**\n   This may be called by a parent generator to trigger/propagate cancellation\n   cancel all pending tasks (including the main task), then end the current task.\n\n   Cancellation propagates down to the whole execution tree held by this Parent task\n   It's also propagated to all joiners of this task and their execution tree/joiners\n\n   Cancellation is noop for terminated/Cancelled tasks tasks\n   **/\n  function cancel() {\n    if (status === RUNNING) {\n      // Setting status to CANCELLED does not necessarily mean that the task/iterators are stopped\n      // effects in the iterator's finally block will still be executed\n      status = CANCELLED\n      queue.cancelAll()\n      // Ending with a TASK_CANCEL will propagate the Cancellation to all joiners\n      end(TASK_CANCEL, false)\n    }\n  }\n\n  function end(result, isErr) {\n    if (!isErr) {\n      // The status here may be RUNNING or CANCELLED\n      // If the status is CANCELLED, then we do not need to change it here\n      if (result === TASK_CANCEL) {\n        status = CANCELLED\n      } else if (status !== CANCELLED) {\n        status = DONE\n      }\n      taskResult = result\n      deferredEnd && deferredEnd.resolve(result)\n    } else {\n      status = ABORTED\n      sagaError.addSagaFrame({ meta, cancelledTasks: cancelledDueToErrorTasks })\n\n      if (task.isRoot) {\n        const sagaStack = sagaError.toString()\n        // we've dumped the saga stack to string and are passing it to user's code\n        // we know that it won't be needed anymore and we need to clear it\n        sagaError.clear()\n        env.onError(result, { sagaStack })\n      }\n      taskError = result\n      deferredEnd && deferredEnd.reject(result)\n    }\n    task.cont(result, isErr)\n    task.joiners.forEach(joiner => {\n      joiner.cb(result, isErr)\n    })\n    task.joiners = null\n  }\n\n  function setContext(props) {\n    if (process.env.NODE_ENV !== 'production') {\n      check(props, is.object, createSetContextWarning('task', props))\n    }\n\n    assignWithSymbols(context, props)\n  }\n\n  function toPromise() {\n    if (deferredEnd) {\n      return deferredEnd.promise\n    }\n\n    deferredEnd = deferred()\n\n    if (status === ABORTED) {\n      deferredEnd.reject(taskError)\n    } else if (status !== RUNNING) {\n      deferredEnd.resolve(taskResult)\n    }\n\n    return deferredEnd.promise\n  }\n\n  const task = {\n    // fields\n    [TASK]: true,\n    id: parentEffectId,\n    meta,\n    isRoot,\n    context,\n    joiners: [],\n    queue,\n\n    // methods\n    cancel,\n    cont,\n    end,\n    setContext,\n    toPromise,\n    isRunning: () => status === RUNNING,\n    /*\n      This method is used both for answering the cancellation status of the task and answering for CANCELLED effects.\n      In most cases, the cancellation of a task propagates to all its unfinished children (including\n      all forked tasks and the mainTask), so a naive implementation of this method would be:\n        `() => status === CANCELLED || mainTask.status === CANCELLED`\n\n      But there are cases that the task is aborted by an error and the abortion caused the mainTask to be cancelled.\n      In such cases, the task is supposed to be aborted rather than cancelled, however the above naive implementation\n      would return true for `task.isCancelled()`. So we need make sure that the task is running before accessing\n      mainTask.status.\n\n      There are cases that the task is cancelled when the mainTask is done (the task is waiting for forked children\n      when cancellation occurs). In such cases, you may wonder `yield io.cancelled()` would return true because\n      `status === CANCELLED` holds, and which is wrong. However, after the mainTask is done, the iterator cannot yield\n      any further effects, so we can ignore such cases.\n\n      See discussions in #1704\n     */\n    isCancelled: () => status === CANCELLED || (status === RUNNING && mainTask.status === CANCELLED),\n    isAborted: () => status === ABORTED,\n    result: () => taskResult,\n    error: () => taskError,\n  }\n\n  return task\n}\n","import { noop, remove } from './utils'\n\n/**\n Used to track a parent task and its forks\n In the fork model, forked tasks are attached by default to their parent\n We model this using the concept of Parent task && main Task\n main task is the main flow of the current Generator, the parent tasks is the\n aggregation of the main tasks + all its forked tasks.\n Thus the whole model represents an execution tree with multiple branches (vs the\n linear execution tree in sequential (non parallel) programming)\n\n A parent tasks has the following semantics\n - It completes if all its forks either complete or all cancelled\n - If it's cancelled, all forks are cancelled as well\n - It aborts if any uncaught error bubbles up from forks\n - If it completes, the return value is the one returned by the main task\n **/\nexport default function forkQueue(mainTask, onAbort, cont) {\n  let tasks = []\n  let result\n  let completed = false\n\n  addTask(mainTask)\n  const getTasks = () => tasks\n\n  function abort(err) {\n    onAbort()\n    cancelAll()\n    cont(err, true)\n  }\n\n  function addTask(task) {\n    tasks.push(task)\n    task.cont = (res, isErr) => {\n      if (completed) {\n        return\n      }\n\n      remove(tasks, task)\n      task.cont = noop\n      if (isErr) {\n        abort(res)\n      } else {\n        if (task === mainTask) {\n          result = res\n        }\n        if (!tasks.length) {\n          completed = true\n          cont(result)\n        }\n      }\n    }\n  }\n\n  function cancelAll() {\n    if (completed) {\n      return\n    }\n    completed = true\n    tasks.forEach(t => {\n      t.cont = noop\n      t.cancel()\n    })\n    tasks = []\n  }\n\n  return {\n    addTask,\n    cancelAll,\n    abort,\n    getTasks,\n  }\n}\n","export default function deferred() {\n  const def = {}\n  def.promise = new Promise((resolve, reject) => {\n    def.resolve = resolve\n    def.reject = reject\n  })\n  return def\n}\n\nexport function arrayOfDeferred(length) {\n  const arr = []\n\n  for (let i = 0; i < length; i++) {\n    arr.push(deferred())\n  }\n\n  return arr\n}\n","import * as is from '@redux-saga/is'\nimport { IO, TASK_CANCEL } from '@redux-saga/symbols'\nimport { RUNNING, CANCELLED, ABORTED, DONE } from './task-status'\nimport effectRunnerMap from './effectRunnerMap'\nimport resolvePromise from './resolvePromise'\nimport nextEffectId from './uid'\nimport { asyncIteratorSymbol, noop, shouldCancel, shouldTerminate } from './utils'\nimport newTask from './newTask'\nimport * as sagaError from './sagaError'\n\nexport default function proc(env, iterator, parentContext, parentEffectId, meta, isRoot, cont) {\n  if (process.env.NODE_ENV !== 'production' && iterator[asyncIteratorSymbol]) {\n    throw new Error(\"redux-saga doesn't support async generators, please use only regular ones\")\n  }\n\n  const finalRunEffect = env.finalizeRunEffect(runEffect)\n\n  /**\n    Tracks the current effect cancellation\n    Each time the generator progresses. calling runEffect will set a new value\n    on it. It allows propagating cancellation to child effects\n  **/\n  next.cancel = noop\n\n  /** Creates a main task to track the main flow */\n  const mainTask = { meta, cancel: cancelMain, status: RUNNING }\n\n  /**\n   Creates a new task descriptor for this generator.\n   A task is the aggregation of it's mainTask and all it's forked tasks.\n   **/\n  const task = newTask(env, mainTask, parentContext, parentEffectId, meta, isRoot, cont)\n\n  const executingContext = {\n    task,\n    digestEffect,\n  }\n\n  /**\n    cancellation of the main task. We'll simply resume the Generator with a TASK_CANCEL\n  **/\n  function cancelMain() {\n    if (mainTask.status === RUNNING) {\n      mainTask.status = CANCELLED\n      next(TASK_CANCEL)\n    }\n  }\n\n  /**\n    attaches cancellation logic to this task's continuation\n    this will permit cancellation to propagate down the call chain\n  **/\n  if (cont) {\n    cont.cancel = task.cancel\n  }\n\n  // kicks up the generator\n  next()\n\n  // then return the task descriptor to the caller\n  return task\n\n  /**\n   * This is the generator driver\n   * It's a recursive async/continuation function which calls itself\n   * until the generator terminates or throws\n   * @param {internal commands(TASK_CANCEL | TERMINATE) | any} arg - value, generator will be resumed with.\n   * @param {boolean} isErr - the flag shows if effect finished with an error\n   *\n   * receives either (command | effect result, false) or (any thrown thing, true)\n   */\n  function next(arg, isErr) {\n    try {\n      let result\n      if (isErr) {\n        result = iterator.throw(arg)\n        // user handled the error, we can clear bookkept values\n        sagaError.clear()\n      } else if (shouldCancel(arg)) {\n        /**\n          getting TASK_CANCEL automatically cancels the main task\n          We can get this value here\n\n          - By cancelling the parent task manually\n          - By joining a Cancelled task\n        **/\n        mainTask.status = CANCELLED\n        /**\n          Cancels the current effect; this will propagate the cancellation down to any called tasks\n        **/\n        next.cancel()\n        /**\n          If this Generator has a `return` method then invokes it\n          This will jump to the finally block\n        **/\n        result = is.func(iterator.return) ? iterator.return(TASK_CANCEL) : { done: true, value: TASK_CANCEL }\n      } else if (shouldTerminate(arg)) {\n        // We get TERMINATE flag, i.e. by taking from a channel that ended using `take` (and not `takem` used to trap End of channels)\n        result = is.func(iterator.return) ? iterator.return() : { done: true }\n      } else {\n        result = iterator.next(arg)\n      }\n\n      if (!result.done) {\n        digestEffect(result.value, parentEffectId, next)\n      } else {\n        /**\n          This Generator has ended, terminate the main task and notify the fork queue\n        **/\n        if (mainTask.status !== CANCELLED) {\n          mainTask.status = DONE\n        }\n        mainTask.cont(result.value)\n      }\n    } catch (error) {\n      if (mainTask.status === CANCELLED) {\n        throw error\n      }\n      mainTask.status = ABORTED\n\n      mainTask.cont(error, true)\n    }\n  }\n\n  function runEffect(effect, effectId, currCb) {\n    /**\n      each effect runner must attach its own logic of cancellation to the provided callback\n      it allows this generator to propagate cancellation downward.\n\n      ATTENTION! effect runners must setup the cancel logic by setting cb.cancel = [cancelMethod]\n      And the setup must occur before calling the callback\n\n      This is a sort of inversion of control: called async functions are responsible\n      of completing the flow by calling the provided continuation; while caller functions\n      are responsible for aborting the current flow by calling the attached cancel function\n\n      Library users can attach their own cancellation logic to promises by defining a\n      promise[CANCEL] method in their returned promises\n      ATTENTION! calling cancel must have no effect on an already completed or cancelled effect\n    **/\n    if (is.promise(effect)) {\n      resolvePromise(effect, currCb)\n    } else if (is.iterator(effect)) {\n      // resolve iterator\n      proc(env, effect, task.context, effectId, meta, /* isRoot */ false, currCb)\n    } else if (effect && effect[IO]) {\n      const effectRunner = effectRunnerMap[effect.type]\n      effectRunner(env, effect.payload, currCb, executingContext)\n    } else {\n      // anything else returned as is\n      currCb(effect)\n    }\n  }\n\n  function digestEffect(effect, parentEffectId, cb, label = '') {\n    const effectId = nextEffectId()\n    env.sagaMonitor && env.sagaMonitor.effectTriggered({ effectId, parentEffectId, label, effect })\n\n    /**\n      completion callback and cancel callback are mutually exclusive\n      We can't cancel an already completed effect\n      And We can't complete an already cancelled effectId\n    **/\n    let effectSettled\n\n    // Completion callback passed to the appropriate effect runner\n    function currCb(res, isErr) {\n      if (effectSettled) {\n        return\n      }\n\n      effectSettled = true\n      cb.cancel = noop // defensive measure\n      if (env.sagaMonitor) {\n        if (isErr) {\n          env.sagaMonitor.effectRejected(effectId, res)\n        } else {\n          env.sagaMonitor.effectResolved(effectId, res)\n        }\n      }\n\n      if (isErr) {\n        sagaError.setCrashedEffect(effect)\n      }\n\n      cb(res, isErr)\n    }\n    // tracks down the current cancel\n    currCb.cancel = noop\n\n    // setup cancellation logic on the parent cb\n    cb.cancel = () => {\n      // prevents cancelling an already completed effect\n      if (effectSettled) {\n        return\n      }\n\n      effectSettled = true\n\n      currCb.cancel() // propagates cancel downward\n      currCb.cancel = noop // defensive measure\n\n      env.sagaMonitor && env.sagaMonitor.effectCancelled(effectId)\n    }\n\n    finalRunEffect(effect, effectId, currCb)\n  }\n}\n","import * as is from '@redux-saga/is'\nimport { compose } from 'redux'\nimport proc from './proc'\nimport { stdChannel } from './channel'\nimport { immediately } from './scheduler'\nimport nextSagaId from './uid'\nimport { check, logError, noop, wrapSagaDispatch, identity, getMetaInfo } from './utils'\n\nconst RUN_SAGA_SIGNATURE = 'runSaga(options, saga, ...args)'\nconst NON_GENERATOR_ERR = `${RUN_SAGA_SIGNATURE}: saga argument must be a Generator function!`\n\nexport function runSaga(\n  { channel = stdChannel(), dispatch, getState, context = {}, sagaMonitor, effectMiddlewares, onError = logError },\n  saga,\n  ...args\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    check(saga, is.func, NON_GENERATOR_ERR)\n  }\n\n  const iterator = saga(...args)\n\n  if (process.env.NODE_ENV !== 'production') {\n    check(iterator, is.iterator, NON_GENERATOR_ERR)\n  }\n\n  const effectId = nextSagaId()\n\n  if (sagaMonitor) {\n    // monitors are expected to have a certain interface, let's fill-in any missing ones\n    sagaMonitor.rootSagaStarted = sagaMonitor.rootSagaStarted || noop\n    sagaMonitor.effectTriggered = sagaMonitor.effectTriggered || noop\n    sagaMonitor.effectResolved = sagaMonitor.effectResolved || noop\n    sagaMonitor.effectRejected = sagaMonitor.effectRejected || noop\n    sagaMonitor.effectCancelled = sagaMonitor.effectCancelled || noop\n    sagaMonitor.actionDispatched = sagaMonitor.actionDispatched || noop\n\n    sagaMonitor.rootSagaStarted({ effectId, saga, args })\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (is.notUndef(dispatch)) {\n      check(dispatch, is.func, 'dispatch must be a function')\n    }\n\n    if (is.notUndef(getState)) {\n      check(getState, is.func, 'getState must be a function')\n    }\n\n    if (is.notUndef(effectMiddlewares)) {\n      const MIDDLEWARE_TYPE_ERROR = 'effectMiddlewares must be an array of functions'\n      check(effectMiddlewares, is.array, MIDDLEWARE_TYPE_ERROR)\n      effectMiddlewares.forEach(effectMiddleware => check(effectMiddleware, is.func, MIDDLEWARE_TYPE_ERROR))\n    }\n\n    check(onError, is.func, 'onError passed to the redux-saga is not a function!')\n  }\n\n  let finalizeRunEffect\n  if (effectMiddlewares) {\n    const middleware = compose(...effectMiddlewares)\n    finalizeRunEffect = runEffect => {\n      return (effect, effectId, currCb) => {\n        const plainRunEffect = eff => runEffect(eff, effectId, currCb)\n        return middleware(plainRunEffect)(effect)\n      }\n    }\n  } else {\n    finalizeRunEffect = identity\n  }\n\n  const env = {\n    channel,\n    dispatch: wrapSagaDispatch(dispatch),\n    getState,\n    sagaMonitor,\n    onError,\n    finalizeRunEffect,\n  }\n\n  return immediately(() => {\n    const task = proc(env, iterator, context, effectId, getMetaInfo(saga), /* isRoot */ true, undefined)\n\n    if (sagaMonitor) {\n      sagaMonitor.effectResolved(effectId, task)\n    }\n\n    return task\n  })\n}\n","import { CANCEL } from '@redux-saga/symbols'\n\nconst MAX_SIGNED_INT = 2147483647\n\nexport default function delayP(ms, val = true) {\n  // https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#maximum_delay_value\n  if (process.env.NODE_ENV !== 'production' && ms > MAX_SIGNED_INT) {\n    throw new Error('delay only supports a maximum value of ' + MAX_SIGNED_INT + 'ms')\n  }\n  let timeoutId\n  const promise = new Promise(resolve => {\n    timeoutId = setTimeout(resolve, Math.min(MAX_SIGNED_INT, ms), val)\n  })\n\n  promise[CANCEL] = () => {\n    clearTimeout(timeoutId)\n  }\n\n  return promise\n}\n","import delayP from '@redux-saga/delay-p'\nimport * as is from '@redux-saga/is'\nimport { IO, SELF_CANCELLATION } from '@redux-saga/symbols'\nimport { check, createSetContextWarning, identity } from './utils'\nimport * as effectTypes from './effectTypes'\n\nconst TEST_HINT =\n  '\\n(HINT: if you are getting these errors in tests, consider using createMockTask from @redux-saga/testing-utils)'\n\nconst makeEffect = (type, payload) => ({\n  [IO]: true,\n  // this property makes all/race distinguishable in generic manner from other effects\n  // currently it's not used at runtime at all but it's here to satisfy type systems\n  combinator: false,\n  type,\n  payload,\n})\n\nconst isForkEffect = eff => is.effect(eff) && eff.type === effectTypes.FORK\n\nexport const detach = eff => {\n  if (process.env.NODE_ENV !== 'production') {\n    check(eff, isForkEffect, 'detach(eff): argument must be a fork effect')\n  }\n  return makeEffect(effectTypes.FORK, { ...eff.payload, detached: true })\n}\n\nexport function take(patternOrChannel = '*', multicastPattern) {\n  if (process.env.NODE_ENV !== 'production' && arguments.length) {\n    check(arguments[0], is.notUndef, 'take(patternOrChannel): patternOrChannel is undefined')\n  }\n  if (is.pattern(patternOrChannel)) {\n    if (is.notUndef(multicastPattern)) {\n      console.warn(`take(pattern) takes one argument but two were provided. Consider passing an array for listening to several action types`)\n    }\n    return makeEffect(effectTypes.TAKE, { pattern: patternOrChannel })\n  }\n  if (is.multicast(patternOrChannel) && is.notUndef(multicastPattern) && is.pattern(multicastPattern)) {\n    return makeEffect(effectTypes.TAKE, { channel: patternOrChannel, pattern: multicastPattern })\n  }\n  if (is.channel(patternOrChannel)) {\n    if (is.notUndef(multicastPattern)) {\n      console.warn(`take(channel) takes one argument but two were provided. Second argument is ignored.`)\n    }\n    return makeEffect(effectTypes.TAKE, { channel: patternOrChannel })\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    throw new Error(`take(patternOrChannel): argument ${patternOrChannel} is not valid channel or a valid pattern`)\n  }\n}\n\nexport const takeMaybe = (...args) => {\n  const eff = take(...args)\n  eff.payload.maybe = true\n  return eff\n}\n\nexport function put(channel, action) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (arguments.length > 1) {\n      check(channel, is.notUndef, 'put(channel, action): argument channel is undefined')\n      check(channel, is.channel, `put(channel, action): argument ${channel} is not a valid channel`)\n      check(action, is.notUndef, 'put(channel, action): argument action is undefined')\n    } else {\n      check(channel, is.notUndef, 'put(action): argument action is undefined')\n    }\n  }\n  if (is.undef(action)) {\n    action = channel\n    // `undefined` instead of `null` to make default parameter work\n    channel = undefined\n  }\n  return makeEffect(effectTypes.PUT, { channel, action })\n}\n\nexport const putResolve = (...args) => {\n  const eff = put(...args)\n  eff.payload.resolve = true\n  return eff\n}\n\nexport function all(effects) {\n  const eff = makeEffect(effectTypes.ALL, effects)\n  eff.combinator = true\n  return eff\n}\n\nexport function race(effects) {\n  const eff = makeEffect(effectTypes.RACE, effects)\n  eff.combinator = true\n  return eff\n}\n\n// this match getFnCallDescriptor logic\nconst validateFnDescriptor = (effectName, fnDescriptor) => {\n  check(fnDescriptor, is.notUndef, `${effectName}: argument fn is undefined or null`)\n\n  if (is.func(fnDescriptor)) {\n    return\n  }\n\n  let context = null\n  let fn\n\n  if (is.array(fnDescriptor)) {\n    ;[context, fn] = fnDescriptor\n    check(fn, is.notUndef, `${effectName}: argument of type [context, fn] has undefined or null \\`fn\\``)\n  } else if (is.object(fnDescriptor)) {\n    ;({ context, fn } = fnDescriptor)\n    check(fn, is.notUndef, `${effectName}: argument of type {context, fn} has undefined or null \\`fn\\``)\n  } else {\n    check(fnDescriptor, is.func, `${effectName}: argument fn is not function`)\n    return\n  }\n\n  if (context && is.string(fn)) {\n    check(context[fn], is.func, `${effectName}: context arguments has no such method - \"${fn}\"`)\n    return\n  }\n\n  check(fn, is.func, `${effectName}: unpacked fn argument (from [context, fn] or {context, fn}) is not a function`)\n}\n\nfunction getFnCallDescriptor(fnDescriptor, args) {\n  let context = null\n  let fn\n\n  if (is.func(fnDescriptor)) {\n    fn = fnDescriptor\n  } else {\n    if (is.array(fnDescriptor)) {\n      ;[context, fn] = fnDescriptor\n    } else {\n      ;({ context, fn } = fnDescriptor)\n    }\n\n    if (context && is.string(fn) && is.func(context[fn])) {\n      fn = context[fn]\n    }\n  }\n\n  return { context, fn, args }\n}\n\nconst isNotDelayEffect = fn => fn !== delay\n\nexport function call(fnDescriptor, ...args) {\n  if (process.env.NODE_ENV !== 'production') {\n    const arg0 = typeof args[0] === 'number' ? args[0] : 'ms'\n    check(\n      fnDescriptor,\n      isNotDelayEffect,\n      `instead of writing \\`yield call(delay, ${arg0})\\` where delay is an effect from \\`redux-saga/effects\\` you should write \\`yield delay(${arg0})\\``,\n    )\n    validateFnDescriptor('call', fnDescriptor)\n  }\n  return makeEffect(effectTypes.CALL, getFnCallDescriptor(fnDescriptor, args))\n}\n\nexport function apply(context, fn, args = []) {\n  const fnDescriptor = [context, fn]\n\n  if (process.env.NODE_ENV !== 'production') {\n    validateFnDescriptor('apply', fnDescriptor)\n  }\n\n  return makeEffect(effectTypes.CALL, getFnCallDescriptor([context, fn], args))\n}\n\nexport function cps(fnDescriptor, ...args) {\n  if (process.env.NODE_ENV !== 'production') {\n    validateFnDescriptor('cps', fnDescriptor)\n  }\n  return makeEffect(effectTypes.CPS, getFnCallDescriptor(fnDescriptor, args))\n}\n\nexport function fork(fnDescriptor, ...args) {\n  if (process.env.NODE_ENV !== 'production') {\n    validateFnDescriptor('fork', fnDescriptor)\n\n    check(fnDescriptor, arg => !is.effect(arg), 'fork: argument must not be an effect')\n  }\n  return makeEffect(effectTypes.FORK, getFnCallDescriptor(fnDescriptor, args))\n}\n\nexport function spawn(fnDescriptor, ...args) {\n  if (process.env.NODE_ENV !== 'production') {\n    validateFnDescriptor('spawn', fnDescriptor)\n  }\n  return detach(fork(fnDescriptor, ...args))\n}\n\nexport function join(taskOrTasks) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (arguments.length > 1) {\n      throw new Error('join(...tasks) is not supported any more. Please use join([...tasks]) to join multiple tasks.')\n    }\n    if (is.array(taskOrTasks)) {\n      taskOrTasks.forEach(t => {\n        check(t, is.task, `join([...tasks]): argument ${t} is not a valid Task object ${TEST_HINT}`)\n      })\n    } else {\n      check(taskOrTasks, is.task, `join(task): argument ${taskOrTasks} is not a valid Task object ${TEST_HINT}`)\n    }\n  }\n\n  return makeEffect(effectTypes.JOIN, taskOrTasks)\n}\n\nexport function cancel(taskOrTasks = SELF_CANCELLATION) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (arguments.length > 1) {\n      throw new Error(\n        'cancel(...tasks) is not supported any more. Please use cancel([...tasks]) to cancel multiple tasks.',\n      )\n    }\n    if (is.array(taskOrTasks)) {\n      taskOrTasks.forEach(t => {\n        check(t, is.task, `cancel([...tasks]): argument ${t} is not a valid Task object ${TEST_HINT}`)\n      })\n    } else if (taskOrTasks !== SELF_CANCELLATION && is.notUndef(taskOrTasks)) {\n      check(taskOrTasks, is.task, `cancel(task): argument ${taskOrTasks} is not a valid Task object ${TEST_HINT}`)\n    }\n  }\n\n  return makeEffect(effectTypes.CANCEL, taskOrTasks)\n}\n\nexport function select(selector = identity, ...args) {\n  if (process.env.NODE_ENV !== 'production' && arguments.length) {\n    check(arguments[0], is.notUndef, 'select(selector, [...]): argument selector is undefined')\n    check(selector, is.func, `select(selector, [...]): argument ${selector} is not a function`)\n  }\n  return makeEffect(effectTypes.SELECT, { selector, args })\n}\n\n/**\n  channel(pattern, [buffer])    => creates a proxy channel for store actions\n**/\nexport function actionChannel(pattern, buffer) {\n  if (process.env.NODE_ENV !== 'production') {\n    check(pattern, is.pattern, 'actionChannel(pattern,...): argument pattern is not valid')\n\n    if (arguments.length > 1) {\n      check(buffer, is.notUndef, 'actionChannel(pattern, buffer): argument buffer is undefined')\n      check(buffer, is.buffer, `actionChannel(pattern, buffer): argument ${buffer} is not a valid buffer`)\n    }\n  }\n\n  return makeEffect(effectTypes.ACTION_CHANNEL, { pattern, buffer })\n}\n\nexport function cancelled() {\n  return makeEffect(effectTypes.CANCELLED, {})\n}\n\nexport function flush(channel) {\n  if (process.env.NODE_ENV !== 'production') {\n    check(channel, is.channel, `flush(channel): argument ${channel} is not valid channel`)\n  }\n\n  return makeEffect(effectTypes.FLUSH, channel)\n}\n\nexport function getContext(prop) {\n  if (process.env.NODE_ENV !== 'production') {\n    check(prop, is.string, `getContext(prop): argument ${prop} is not a string`)\n  }\n\n  return makeEffect(effectTypes.GET_CONTEXT, prop)\n}\n\nexport function setContext(props) {\n  if (process.env.NODE_ENV !== 'production') {\n    check(props, is.object, createSetContextWarning(null, props))\n  }\n\n  return makeEffect(effectTypes.SET_CONTEXT, props)\n}\n\nexport const delay = call.bind(null, delayP)\n","import * as is from '@redux-saga/is'\nimport { makeIterator } from '../utils'\n\nconst done = value => ({ done: true, value })\nexport const qEnd = {}\n\nexport function safeName(patternOrChannel) {\n  if (is.channel(patternOrChannel)) {\n    return 'channel'\n  }\n\n  if (is.stringableFunc(patternOrChannel)) {\n    return String(patternOrChannel)\n  }\n\n  if (is.func(patternOrChannel)) {\n    return patternOrChannel.name\n  }\n\n  return String(patternOrChannel)\n}\n\nexport default function fsmIterator(fsm, startState, name) {\n  let stateUpdater,\n    errorState,\n    effect,\n    nextState = startState\n\n  function next(arg, error) {\n    if (nextState === qEnd) {\n      return done(arg)\n    }\n    if (error && !errorState) {\n      nextState = qEnd\n      throw error\n    } else {\n      stateUpdater && stateUpdater(arg)\n      const currentState = error ? fsm[errorState](error) : fsm[nextState]()\n      ;({ nextState, effect, stateUpdater, errorState } = currentState)\n      return nextState === qEnd ? done(arg) : effect\n    }\n  }\n\n  return makeIterator(next, error => next(null, error), name)\n}\n","import fsmIterator, { safeName } from './fsmIterator'\nimport { take, fork } from '../io'\n\nexport default function takeEvery(patternOrChannel, worker, ...args) {\n  const yTake = { done: false, value: take(patternOrChannel) }\n  const yFork = ac => ({ done: false, value: fork(worker, ...args, ac) })\n\n  let action,\n    setAction = ac => (action = ac)\n\n  return fsmIterator(\n    {\n      q1() {\n        return { nextState: 'q2', effect: yTake, stateUpdater: setAction }\n      },\n      q2() {\n        return { nextState: 'q1', effect: yFork(action) }\n      },\n    },\n    'q1',\n    `takeEvery(${safeName(patternOrChannel)}, ${worker.name})`,\n  )\n}\n","import fsmIterator, { safeName } from './fsmIterator'\nimport { cancel, take, fork } from '../io'\n\nexport default function takeLatest(patternOrChannel, worker, ...args) {\n  const yTake = { done: false, value: take(patternOrChannel) }\n  const yFork = ac => ({ done: false, value: fork(worker, ...args, ac) })\n  const yCancel = task => ({ done: false, value: cancel(task) })\n\n  let task, action\n  const setTask = t => (task = t)\n  const setAction = ac => (action = ac)\n\n  return fsmIterator(\n    {\n      q1() {\n        return { nextState: 'q2', effect: yTake, stateUpdater: setAction }\n      },\n      q2() {\n        return task\n          ? { nextState: 'q3', effect: yCancel(task) }\n          : { nextState: 'q1', effect: yFork(action), stateUpdater: setTask }\n      },\n      q3() {\n        return { nextState: 'q1', effect: yFork(action), stateUpdater: setTask }\n      },\n    },\n    'q1',\n    `takeLatest(${safeName(patternOrChannel)}, ${worker.name})`,\n  )\n}\n","import fsmIterator, { safeName } from './fsmIterator'\nimport { take, call } from '../io'\n\nexport default function takeLeading(patternOrChannel, worker, ...args) {\n  const yTake = { done: false, value: take(patternOrChannel) }\n  const yCall = ac => ({ done: false, value: call(worker, ...args, ac) })\n\n  let action\n  const setAction = ac => (action = ac)\n\n  return fsmIterator(\n    {\n      q1() {\n        return { nextState: 'q2', effect: yTake, stateUpdater: setAction }\n      },\n      q2() {\n        return { nextState: 'q1', effect: yCall(action) }\n      },\n    },\n    'q1',\n    `takeLeading(${safeName(patternOrChannel)}, ${worker.name})`,\n  )\n}\n","import fsmIterator, { safeName } from './fsmIterator'\nimport { take, fork, actionChannel, delay } from '../io'\nimport * as buffers from '../buffers'\n\nexport default function throttle(delayLength, pattern, worker, ...args) {\n  let action, channel\n\n  const yActionChannel = { done: false, value: actionChannel(pattern, buffers.sliding(1)) }\n  const yTake = () => ({ done: false, value: take(channel) })\n  const yFork = ac => ({ done: false, value: fork(worker, ...args, ac) })\n  const yDelay = { done: false, value: delay(delayLength) }\n\n  const setAction = ac => (action = ac)\n  const setChannel = ch => (channel = ch)\n\n  return fsmIterator(\n    {\n      q1() {\n        return { nextState: 'q2', effect: yActionChannel, stateUpdater: setChannel }\n      },\n      q2() {\n        return { nextState: 'q3', effect: yTake(), stateUpdater: setAction }\n      },\n      q3() {\n        return { nextState: 'q4', effect: yFork(action) }\n      },\n      q4() {\n        return { nextState: 'q2', effect: yDelay }\n      },\n    },\n    'q1',\n    `throttle(${safeName(pattern)}, ${worker.name})`,\n  )\n}\n","import fsmIterator, { qEnd } from './fsmIterator'\nimport { call, delay } from '../io'\n\nexport default function retry(maxTries, delayLength, fn, ...args) {\n  let counter = maxTries\n\n  const yCall = { done: false, value: call(fn, ...args) }\n  const yDelay = { done: false, value: delay(delayLength) }\n\n  return fsmIterator(\n    {\n      q1() {\n        return {nextState: 'q2', effect: yCall, errorState: 'q10'}\n      },\n      q2() {\n        return {nextState: qEnd}\n      },\n      q10 (error) {\n        counter -= 1\n        if (counter <= 0) {\n          throw error\n        }\n        return {nextState: 'q1', effect: yDelay}\n      },\n    },\n    'q1',\n    `retry(${fn.name})`,\n  )\n}\n","import fsmIterator, { safeName } from './fsmIterator'\nimport { delay, fork, race, take } from '../io'\n\nexport default function debounceHelper(delayLength, patternOrChannel, worker, ...args) {\n  let action, raceOutput\n\n  const yTake = { done: false, value: take(patternOrChannel) }\n  const yRace = {\n    done: false,\n    value: race({\n      action: take(patternOrChannel),\n      debounce: delay(delayLength),\n    }),\n  }\n  const yFork = ac => ({ done: false, value: fork(worker, ...args, ac) })\n  const yNoop = value => ({ done: false, value })\n\n  const setAction = ac => (action = ac)\n  const setRaceOutput = ro => (raceOutput = ro)\n\n  return fsmIterator(\n    {\n      q1() {\n        return { nextState: 'q2', effect: yTake, stateUpdater: setAction }\n      },\n      q2() {\n        return { nextState: 'q3', effect: yRace, stateUpdater: setRaceOutput }\n      },\n      q3() {\n        return raceOutput.debounce\n          ? { nextState: 'q1', effect: yFork(action) }\n          : { nextState: 'q2', effect: yNoop(raceOutput.action), stateUpdater: setAction }\n      },\n    },\n    'q1',\n    `debounce(${safeName(patternOrChannel)}, ${worker.name})`,\n  )\n}\n","import * as is from '@redux-saga/is'\nimport { call, fork } from './io'\nimport { check } from './utils'\nimport {\n  takeEveryHelper,\n  takeLatestHelper,\n  takeLeadingHelper,\n  throttleHelper,\n  retryHelper,\n  debounceHelper,\n} from './sagaHelpers'\n\nconst validateTakeEffect = (fn, patternOrChannel, worker) => {\n  check(patternOrChannel, is.notUndef, `${fn.name} requires a pattern or channel`)\n  check(worker, is.notUndef, `${fn.name} requires a saga parameter`)\n}\n\nexport function takeEvery(patternOrChannel, worker, ...args) {\n  if (process.env.NODE_ENV !== 'production') {\n    validateTakeEffect(takeEvery, patternOrChannel, worker)\n  }\n\n  return fork(takeEveryHelper, patternOrChannel, worker, ...args)\n}\n\nexport function takeLatest(patternOrChannel, worker, ...args) {\n  if (process.env.NODE_ENV !== 'production') {\n    validateTakeEffect(takeLatest, patternOrChannel, worker)\n  }\n\n  return fork(takeLatestHelper, patternOrChannel, worker, ...args)\n}\n\nexport function takeLeading(patternOrChannel, worker, ...args) {\n  if (process.env.NODE_ENV !== 'production') {\n    validateTakeEffect(takeLeading, patternOrChannel, worker)\n  }\n\n  return fork(takeLeadingHelper, patternOrChannel, worker, ...args)\n}\n\nexport function throttle(ms, pattern, worker, ...args) {\n  if (process.env.NODE_ENV !== 'production') {\n    check(pattern, is.notUndef, 'throttle requires a pattern')\n    check(worker, is.notUndef, 'throttle requires a saga parameter')\n  }\n\n  return fork(throttleHelper, ms, pattern, worker, ...args)\n}\n\nexport function retry(maxTries, delayLength, worker, ...args) {\n  return call(retryHelper, maxTries, delayLength, worker, ...args)\n}\n\nexport function debounce(delayLength, pattern, worker, ...args) {\n  return fork(debounceHelper, delayLength, pattern, worker, ...args)\n}\n","import * as is from '@redux-saga/is'\nimport { check, assignWithSymbols, createSetContextWarning } from './utils'\nimport { stdChannel } from './channel'\nimport { runSaga } from './runSaga'\n\nexport default function sagaMiddlewareFactory({ context = {}, channel = stdChannel(), sagaMonitor, ...options } = {}) {\n  let boundRunSaga\n\n  if (process.env.NODE_ENV !== 'production') {\n    check(channel, is.channel, 'options.channel passed to the Saga middleware is not a channel')\n  }\n\n  function sagaMiddleware({ getState, dispatch }) {\n    boundRunSaga = runSaga.bind(null, {\n      ...options,\n      context,\n      channel,\n      dispatch,\n      getState,\n      sagaMonitor,\n    })\n\n    return next => action => {\n      if (sagaMonitor && sagaMonitor.actionDispatched) {\n        sagaMonitor.actionDispatched(action)\n      }\n      const result = next(action) // hit reducers\n      channel.put(action)\n      return result\n    }\n  }\n\n  sagaMiddleware.run = (...args) => {\n    if (process.env.NODE_ENV !== 'production' && !boundRunSaga) {\n      throw new Error('Before running a Saga, you must mount the Saga middleware on the Store using applyMiddleware')\n    }\n    return boundRunSaga(...args)\n  }\n\n  sagaMiddleware.setContext = props => {\n    if (process.env.NODE_ENV !== 'production') {\n      check(props, is.object, createSetContextWarning('sagaMiddleware', props))\n    }\n\n    assignWithSymbols(context, props)\n  }\n\n  return sagaMiddleware\n}\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["createSymbol","name","CANCEL","CHANNEL_END_TYPE","IO","MATCH","MULTICAST","SAGA_ACTION","SELF_CANCELLATION","TASK","TASK_CANCEL","TERMINATE","SAGA_LOCATION","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","undef","v","notUndef","func","f","string","s","array","Array","isArray","promise","p","then","iterator","it","next","throw","pattern","pat","symbol","every","channel","ch","take","close","stringableFunc","sym","Symbol","constructor","multicast","kTrue","konst","noop","identity","assignWithSymbols","getOwnPropertySymbols","forEach","flatMap","mapper","arr","concat","map","remove","item","index","indexOf","splice","once","fn","called","kThrow","err","kReturn","value","done","makeIterator","thro","meta","return","isSagaIterator","logError","error","sagaStack","console","createEmptyArray","n","wrapSagaDispatch","dispatch","action","defineProperty","shouldTerminate","res","shouldCancel","shouldComplete","createAllStyleChildCallbacks","shape","parentCallback","completed","keys","totalCount","completedCount","results","is","childCallbacks","chCbAtKey","isErr","cancel","getMetaInfo","location","getLocation","instrumented","BUFFER_OVERFLOW","ON_OVERFLOW_THROW","ON_OVERFLOW_SLIDE","ON_OVERFLOW_EXPAND","zeroBuffer","isEmpty","put","ringBuffer","limit","overflowAction","pushIndex","popIndex","push","flush","items","doubledLimit","Error","none","sliding","expanding","initialSize","queue","semaphore","exec","task","suspend","release","asap","immediately","undefined","shift","patterns","input","some","matcher","predicate","type","String","wildcard","matcherCreator","END","isEnd","a","buffer","buffers","closed","takers","cb","len","taker","multicastChannel","currentTakers","nextTakers","ensureCanMutateNextTakers","slice","matchers","stdChannel","chan","root","result","observable","ponyfill","self","window","global","module","Function","randomString","Math","random","toString","substring","split","join","RUNNING","CANCELLED","ABORTED","DONE","TAKE","PUT","ALL","RACE","CALL","CPS","FORK","JOIN","SELECT","ACTION_CHANNEL","FLUSH","GET_CONTEXT","SET_CONTEXT","resolvePromise","cancelPromise","current","cancelSingleTask","taskToCancel","isRunning","effectRunnerMap","effectTypes","env","maybe","takeCb","resolve","effects","digestEffect","effectId","currentEffectId","response","childCbs","context","args","proc","cpsCb","detached","parent","taskIterator","resolved","arg","createTaskIterator","getIteratorMetaInfo","child","addTask","isAborted","abort","taskOrTasks","joinSingleTask","taskToJoin","joiner","joiners","t","selector","getState","match","data","isCancelled","prop","props","formatLocation","fileName","lineNumber","sagaLocationAsString","sagaMeta","cancelledTasksAsString","cancelledTasks","crashedEffect","addSagaFrame","frame","clear","setCrashedEffect","effect","firstSaga","otherSagas","crashedEffectLocation","code","newTask","mainTask","parentContext","parentEffectId","isRoot","cont","taskResult","taskError","status","deferredEnd","cancelledDueToErrorTasks","create","onAbort","tasks","cancelAll","getTasks","forkQueue","end","sagaError","onError","reject","id","setContext","toPromise","def","Promise","finalRunEffect","finalizeRunEffect","currCb","effectRunner","payload","executingContext","label","effectSettled","nextEffectId","sagaMonitor","effectRejected","effectResolved","effectTriggered","effectCancelled","runSaga","saga","effectMiddlewares","nextSagaId","rootSagaStarted","actionDispatched","middleware","_len","funcs","_key","reduce","b","runEffect","eff","MAX_SIGNED_INT","delayP","ms","val","timeoutId","setTimeout","min","clearTimeout","makeEffect","combinator","detach","patternOrChannel","multicastPattern","warn","race","getFnCallDescriptor","fnDescriptor","fork","actionChannel","delay","bind","qEnd","safeName","fsmIterator","fsm","startState","stateUpdater","errorState","nextState","currentState","takeEvery","worker","yTake","setAction","ac","q1","q2","takeLatest","yFork","yCancel","setTask","q3","takeLeading","throttle","delayLength","yActionChannel","yDelay","setChannel","q4","retry","maxTries","counter","yCall","q10","debounceHelper","raceOutput","yRace","debounce","setRaceOutput","ro","retryHelper","takeEveryHelper","takeLatestHelper","takeLeadingHelper","throttleHelper","boundRunSaga","options","excluded","sourceKeys","sagaMiddleware","run","subscribe","unsubscribe"],"mappings":"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"}